"use client";

import React, {useEffect, useRef, useState} from "react";
import styles from "./VideoPlayer.module.css";

const VideoPlayer = () => {
  const [isPaused, setIsPaused] = useState<boolean>(false);
  const [videoDuration, setVideoDuration] = useState<number>(0);
  const [currVideoTime, setCurrVideoTime] = useState<number>(0);
  const videoRef = useRef<HTMLVideoElement | null>(null);

  const contRef = React.createRef<HTMLDivElement>();
  const [isFullScreen, setIsFullScreen] = useState<boolean>(false);


  // playPause function
  const togglePlayPause: () => void = () => {
    console.log("play/pause triggered");
    const video = videoRef.current;
    if (video) {
      if (video.paused) {
        console.log("playing");
        setIsPaused(false);     // changing to playing
        video.play();
      } else {
        console.log("paused");
        setIsPaused(true);
        video.pause();
      }
    }
  };

  // full screen video
  const expandCollapseVideo: () => void = () => {
    const container = contRef.current;
    let fs: boolean = isFullScreen;     // full screen boolean
    // from DOM
    if (container) {
      if (fs) document.exitFullscreen();
      else    container.requestFullscreen();
    }
    setIsFullScreen(!fs);
  };

  // setting video duration and some keyboard shortcuts
  useEffect(() => {
    const video = videoRef.current;
    if (video) {
      // set the video duration
      setVideoDuration(video.duration);
    }
    // keyboard shortcuts
    const listener: (e: KeyboardEvent) => void = (e) => {
      if (e.key === "f") {
        expandCollapseVideo();
      } else if (e.key === "k") {
        console.log('play or pause');
        togglePlayPause();
      } else if (e.key === "Escape") {
        if (isFullScreen) document.exitFullscreen().then(() => {});
      }
    }
    document.addEventListener("keydown", listener);

    return () => document.removeEventListener("keydown", listener);
  }, []);
  // settings timeout for every 10sec
  useEffect(() => {
    if (isPaused) return;
    const currentTime = videoRef.current?.currentTime;
    if (videoDuration != null && currentTime != null) {
      let loadingTimeout = setTimeout(() => {
        if (currVideoTime == currentTime) {
          setCurrVideoTime((prev) => prev + 0.000001);
        } else {
          setCurrVideoTime(currentTime);
        }
      }, 10);

      return () => {
        clearTimeout(loadingTimeout);
      };
    }
  }, [currVideoTime, videoDuration, isPaused]);

  // playPause Component
  type playPauseProps = {
    paused: boolean;
    onPlayPause: () => void;
  };
  const PlayPauseBtn = ({paused, onPlayPause}: playPauseProps) => {
    const video = videoRef.current;
    return (
      <button
        className={styles.controlBtn}
        id={styles.playPauseBtn}
        onClick={() => onPlayPause()}
      >
        {paused ? (
          <i className="fa-solid fa-play"></i>
        ) : (
          <i className="fa-solid fa-pause"></i>
        )}
      </button>
    );
  };

  const formatTime = (time: number): string => {
    let min: number = Math.floor(time / 60);
    let sec: number = time % 60;
    return `${min.toString().padStart(2, "0")} : ${sec
      .toString()
      .padStart(2, "0")}`;
  };

  return (
    <>
      <div
        className={`${styles.videoContainer} ${
          isFullScreen ? styles.fullScreenVideo : ""
        }`}
        ref={contRef}
      >
        <video className={styles.video} ref={videoRef} autoPlay loop muted >
          <source src="videos/ocean.mp4" type="video/mp4"/>
        </video>
        <div className={styles.videoControlsContainer}>
          <div className={styles.videoTimeline}></div>
          <div className={styles.controls}>
            <div className={styles.leftControls}>
              <PlayPauseBtn paused={isPaused} onPlayPause={togglePlayPause}/>
              <div>{`${formatTime(Math.round(currVideoTime))} / ${formatTime(
                Math.round(videoDuration)
              )}`}</div>
            </div>
            <div className={styles.rightControls}>
              <button
                className={styles.controlBtn}
                id={styles.fullScreen}
                onClick={() => expandCollapseVideo()}
              >
                {isFullScreen ? (
                  <i className="fa-solid fa-compress"></i>
                ) : (
                  <i className="fa-solid fa-expand"></i>
                )}
              </button>
            </div>
          </div>
        </div>
      </div>
      {
        isPaused ? "Paused" : "Playing"
      }
      {
        isFullScreen ? "Full Screen" : "Not Full Screen"
      }
    </>
  );
};

export default VideoPlayer;
